{"version":3,"sources":["api/client.js","features/posts/postsSlice.js","features/users/usersSlice.js","features/notifications/notificationsSlice.js","app/store.js","app/Navbar.js","app/Spinner.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/ReactionButtons.js","features/posts/PostExcerpt.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","features/users/UsersList.js","features/users/UserPage.js","features/notifications/NotificationList.js","App.js","serviceWorker.js","api/server.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","postsAdapter","createEntityAdapter","sortComparer","b","date","localeCompare","initialState","getInitialState","status","error","fetchPosts","createAsyncThunk","posts","addNewPost","initialPost","postsSlice","createSlice","name","reducers","postUpdated","state","action","payload","title","user","content","id","existingPost","entities","reactionAdded","desc","postId","reactions","extraReducers","pending","fulfilled","upsertMany","rejected","addOne","actions","postAdded","getSelectors","st","selectAllPosts","selectAll","selectPostById","selectById","selectPostIds","selectIds","selectPostsByUser","createSelector","userId","filter","getPostsStatus","usersAdapter","fetchUsers","users","usersSlice","setAll","selectAllUsers","selectUserById","notificationsAdapter","fetchNotifications","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","notifications","notificationsSlice","allNotificationsRead","Object","values","forEach","notif","read","isNew","getNotificationStatus","configureStore","reducer","postsReducer","usersReducer","notificationsReducer","useStyles","createUseStyles","logo","Navbar","dispatch","useDispatch","notificationStatus","useSelector","useState","isOpen","setIsOpen","className","role","aria-label","to","aria-expanded","data-target","onClick","aria-hidden","disabled","Spinner","React","memo","author","TimeAgo","parsedDate","parseISO","postDate","formatDistanceToNow","estimatedTime","ReactionButtons","userReactions","reactionList","map","emoji","count","renderedEmoji","key","PostExcerpt","PostsList","orderedPostsIds","postsStatus","renderedPosts","useEffect","AddPostForm","setTitle","setUser","setContent","addRequestStatus","setAddRequestStatus","canSubmit","every","Boolean","handleSubmit","evt","preventDefault","resultAction","unwrapResult","console","renderedUsers","value","onSubmit","type","placeholder","onChange","target","rows","SinglePostPage","match","params","EditPostForm","history","originalPost","incompleteForm","push","goBack","UsersList","firstName","lastName","username","length","UserPage","userPosts","NotificationList","renderedNotifications","timeAgo","find","App","exact","path","render","component","location","hostname","seedDate","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","notificationTemplates","Server","routes","this","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","Array","db","template","nanoid","between","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","findName","internet","userName","afterCreate","createList","sentence","recent","article","thumbsUp","hooray","heart","rocket","eyes","association","past","text","paragraph","serializers","seeds","store","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c47618e3.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { \"Content-Type\": \"application/json\" };\n\n  const config = {\n    method: body ? \"POST\" : \"GET\",\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  };\n\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n\n  let data;\n  try {\n    const response = await window.fetch(endpoint, config);\n    data = await response.json();\n    if (response.ok) {\n      return data;\n    }\n    throw new Error(response.statusText);\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data);\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: \"GET\" });\n};\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body });\n};\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n  createSelector,\r\n} from \"@reduxjs/toolkit\";\r\nimport { client } from \"../../api/client\";\r\n\r\nconst postsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\r\n});\r\n\r\nconst initialState = postsAdapter.getInitialState({\r\n  status: \"idle\",\r\n  error: null,\r\n});\r\n\r\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\r\n  const endpoint = \"/fakeApi/posts\";\r\n  const response = await client.get(endpoint);\r\n  return response.posts;\r\n});\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n  \"posts/addNewPost\",\r\n  async (initialPost) => {\r\n    const endpoint = \"/fakeApi/posts\";\r\n    const response = await client.post(endpoint, { post: initialPost });\r\n    return response.post;\r\n  }\r\n);\r\n\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    postUpdated: (state, action) => {\r\n      const { title, user, content, id } = action.payload;\r\n      const existingPost = state.entities[id];\r\n      if (existingPost) {\r\n        existingPost.title = title;\r\n        existingPost.user = user;\r\n        existingPost.content = content;\r\n      }\r\n    },\r\n    reactionAdded: (state, action) => {\r\n      const { desc, postId } = action.payload;\r\n      const { reactions } = state.entities[postId];\r\n      if (reactions[desc]) {\r\n        reactions[desc] += 1;\r\n      } else {\r\n        reactions[desc] = 1;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [fetchPosts.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [fetchPosts.fulfilled]: (state, action) => {\r\n      state.status = \"success\";\r\n      postsAdapter.upsertMany(state, action.payload);\r\n    },\r\n    [fetchPosts.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n      state.error = action.error.message;\r\n    },\r\n    [addNewPost.fulfilled]: postsAdapter.addOne,\r\n  },\r\n});\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n\r\nexport const {\r\n  selectAll: selectAllPosts,\r\n  selectById: selectPostById,\r\n  selectIds: selectPostIds,\r\n} = postsAdapter.getSelectors((st) => st.posts);\r\n\r\nexport const selectPostsByUser = createSelector(\r\n  [selectAllPosts, (st, userId) => userId],\r\n  (posts, userId) => posts.filter((post) => post.user === userId)\r\n);\r\n\r\nexport const getPostsStatus = (st) => st.posts.status;\r\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n} from \"@reduxjs/toolkit\";\r\nimport { client } from \"../../api/client\";\r\n\r\nconst usersAdapter = createEntityAdapter();\r\n\r\nconst initialState = usersAdapter.getInitialState();\r\n\r\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\r\n  const endpoint = \"/fakeApi/users\";\r\n  const response = await client.get(endpoint);\r\n  return response.users;\r\n});\r\n\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [fetchUsers.fulfilled]: (state, action) => {\r\n      usersAdapter.setAll(state, action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport default usersSlice.reducer;\r\n\r\nexport const {\r\n  selectAll: selectAllUsers,\r\n  selectById: selectUserById,\r\n} = usersAdapter.getSelectors((st) => st.users);\r\n","import {\n  createSlice,\n  createAsyncThunk,\n  createEntityAdapter,\n} from \"@reduxjs/toolkit\";\nimport { client } from \"../../api/client\";\n\nconst notificationsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\n});\n\nconst initialState = notificationsAdapter.getInitialState({\n  status: \"idle\",\n});\n\nexport const fetchNotifications = createAsyncThunk(\n  \"notifications/fetchNotifications\",\n  async (_, { getState }) => {\n    const allNotifications = selectAllNotifications(getState());\n    const [latestNotification] = allNotifications;\n    const latestTimestamp = latestNotification ? latestNotification.date : \"\";\n    const endpoint = `/fakeApi/notifications?since=${latestTimestamp}`;\n    const response = await client.get(endpoint);\n    return response.notifications;\n  }\n);\n\nconst notificationsSlice = createSlice({\n  name: \"notifications\",\n  initialState,\n  reducers: {\n    allNotificationsRead: (state, action) => {\n      Object.values(state.entities).forEach((notif) => (notif.read = true));\n    },\n  },\n  extraReducers: {\n    [fetchNotifications.pending]: (state, action) => {\n      state.status = \"pending\";\n    },\n    [fetchNotifications.fulfilled]: (state, action) => {\n      Object.values(state.entities).forEach(\n        (notif) => (notif.isNew = !notif.read)\n      );\n      notificationsAdapter.upsertMany(state, action.payload);\n      state.status = \"success\";\n    },\n  },\n});\n\nexport const { allNotificationsRead } = notificationsSlice.actions;\n\nexport default notificationsSlice.reducer;\n\nexport const getNotificationStatus = (state) => state.notifications.status;\n\nexport const {\n  selectAll: selectAllNotifications,\n} = notificationsAdapter.getSelectors((st) => st.notifications);\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport postsReducer from \"../features/posts/postsSlice\";\r\nimport usersReducer from \"../features/users/usersSlice\";\r\nimport notificationsReducer from \"../features/notifications/notificationsSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n    users: usersReducer,\r\n    notifications: notificationsReducer,\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  fetchNotifications,\r\n  getNotificationStatus,\r\n} from \"../features/notifications/notificationsSlice\";\r\nimport { createUseStyles } from \"react-jss\";\r\n\r\nconst useStyles = createUseStyles({\r\n  logo: {},\r\n});\r\n\r\nfunction Navbar() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const notificationStatus = useSelector(getNotificationStatus);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggleMenu = () => {\r\n    setIsOpen((st) => !st);\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className=\"navbar is-primary is-fixed-top\"\r\n      role=\"navigation\"\r\n      aria-label=\"main navigation\"\r\n    >\r\n      <div className=\"navbar-brand\">\r\n        <Link to=\"/\" className=\"navbar-item\">\r\n          Posts\r\n        </Link>\r\n        <div\r\n          role=\"button\"\r\n          className={`navbar-burger burger ${isOpen ? \"is-active\" : \"\"}`}\r\n          aria-label=\"menu\"\r\n          aria-expanded=\"false\"\r\n          data-target=\"navbarBasicExample\"\r\n          onClick={toggleMenu}\r\n        >\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        id=\"navbarBasicExample\"\r\n        className={`navbar-menu ${isOpen ? \"is-active\" : \"\"}`}\r\n      >\r\n        <div className=\"navbar-start\">\r\n          <Link to=\"/users\" className=\"navbar-item\">\r\n            Users\r\n          </Link>\r\n          <Link to=\"/notifications\" className=\"navbar-item\">\r\n            Notifications\r\n          </Link>\r\n        </div>\r\n        <div className=\"navbar-end\">\r\n          <div className=\"navbar-item\">\r\n            <button\r\n              className={`button is-light ${\r\n                notificationStatus === \"pending\" && \"is-loading\"\r\n              }`}\r\n              disabled={notificationStatus === \"pending\"}\r\n              onClick={() => dispatch(fetchNotifications())}\r\n            >\r\n              Refresh Notifications\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\n\nfunction Spinner() {\n  return (\n    <div className=\"level-item\">\n      <span className=\"icon has-text-info is-large\">\n        <i className=\"fas fa-spinner fa-pulse fa-3x\"></i>\n      </span>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUserById } from \"../users/usersSlice\";\r\n\r\nfunction PostAuthor({ userId }) {\r\n  const user = useSelector((st) => selectUserById(st, userId));\r\n  const author = `by ${user.name}`;\r\n\r\n  return <em>{author}</em>;\r\n}\r\n\r\nexport default React.memo(PostAuthor);\r\n","import React from \"react\";\r\nimport { parseISO, formatDistanceToNow } from \"date-fns\";\r\n\r\nfunction TimeAgo({ date }) {\r\n  const parsedDate = parseISO(date);\r\n  const postDate = formatDistanceToNow(parsedDate);\r\n  const estimatedTime = `${postDate} ago`;\r\n\r\n  return <span title={parsedDate}>{estimatedTime}</span>;\r\n}\r\n\r\nexport default TimeAgo;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { reactionAdded } from \"./postsSlice\";\r\n\r\nfunction ReactionButtons({ userReactions, postId }) {\r\n  const reactions = [\r\n    [\"thumbsUp\", \"👍\"],\r\n    [\"hooray\", \"🎉\"],\r\n    [\"heart\", \"❤️\"],\r\n    [\"rocket\", \"🚀\"],\r\n    [\"eyes\", \"👀\"],\r\n  ];\r\n  const dispatch = useDispatch();\r\n  const reactionList = reactions.map(([desc, emoji]) => {\r\n    const count = userReactions[desc] || 0;\r\n    const renderedEmoji = `${emoji} ${count}`;\r\n\r\n    return (\r\n      <button\r\n        key={desc}\r\n        title={desc}\r\n        className=\"button mr-2\"\r\n        onClick={() => dispatch(reactionAdded({ desc, postId }))}\r\n      >\r\n        {renderedEmoji}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div>{reactionList}</div>;\r\n}\r\n\r\nexport default ReactionButtons;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectPostById } from \"./postsSlice\";\r\nimport PostAuthor from \"./PostAuthor\";\r\nimport TimeAgo from \"./TimeAgo\";\r\nimport ReactionButtons from \"./ReactionButtons\";\r\n\r\nfunction PostExcerpt({ postId }) {\r\n  const { title, content, id, user, date, reactions } = useSelector((st) =>\r\n    selectPostById(st, postId)\r\n  );\r\n\r\n  return (\r\n    <article className=\"notification\">\r\n      <p className=\"title is-4\">{title}</p>\r\n      <p className=\"subtitle is-6\">\r\n        <PostAuthor userId={user} /> <TimeAgo date={date} />\r\n      </p>\r\n      <p className=\"subtitle is-6\">{content}</p>\r\n      <ReactionButtons userReactions={reactions} postId={id} />\r\n      <div className=\"buttons mt-4\">\r\n        <Link className=\"button\" to={`/post/${id}`}>\r\n          View Post\r\n        </Link>\r\n        <Link className=\"button\" to={`/editPost/${id}`}>\r\n          Edit Post\r\n        </Link>\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default PostExcerpt;\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport Spinner from \"../../app/Spinner\";\r\nimport { selectPostIds, fetchPosts } from \"./postsSlice\";\r\nimport PostExcerpt from \"./PostExcerpt\";\r\n\r\nfunction PostsList() {\r\n  const dispatch = useDispatch();\r\n  const orderedPostsIds = useSelector(selectPostIds);\r\n  const postsStatus = useSelector((state) => state.posts.status);\r\n\r\n  const renderedPosts = orderedPostsIds.map((postId) => (\r\n    <PostExcerpt key={postId} postId={postId} />\r\n  ));\r\n\r\n  let content;\r\n\r\n  if (postsStatus === \"loading\") {\r\n    content = <Spinner />;\r\n  } else if (postsStatus === \"success\") {\r\n    content = renderedPosts;\r\n  } else if (postsStatus === \"failed\") {\r\n    content = \"Failed to load new posts\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (postsStatus === \"idle\") dispatch(fetchPosts());\r\n  }, [postsStatus, dispatch]);\r\n\r\n  return (\r\n    <section className=\"section\">\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Posts</h1>\r\n        {content}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default PostsList;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { unwrapResult } from \"@reduxjs/toolkit\";\r\nimport { addNewPost } from \"./postsSlice\";\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\n\r\nfunction AddPostForm() {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [user, setUser] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\r\n  const dispatch = useDispatch();\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  const onTitleChange = (evt) => setTitle(evt.target.value);\r\n  const onUserChange = (evt) => setUser(evt.target.value);\r\n  const onContentChange = (evt) => setContent(evt.target.value);\r\n\r\n  const completedForm = [title, user, content].every(Boolean);\r\n  const canSubmit = completedForm && addRequestStatus === \"idle\";\r\n\r\n  const handleSubmit = async (evt) => {\r\n    evt.preventDefault();\r\n    if (!canSubmit) return;\r\n    try {\r\n      setAddRequestStatus(\"pending\");\r\n      const resultAction = await dispatch(addNewPost({ title, user, content }));\r\n      unwrapResult(resultAction);\r\n      setTitle(\"\");\r\n      setUser(\"\");\r\n      setContent(\"\");\r\n    } catch (err) {\r\n      console.error(\"Failed to save new post\", err);\r\n    } finally {\r\n      setAddRequestStatus(\"idle\");\r\n    }\r\n  };\r\n\r\n  const renderedUsers = users.map((user) => (\r\n    <option key={user.id} value={user.id}>\r\n      {user.name}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <section className=\"section\">\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Add New Post</h1>\r\n\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"field\">\r\n            <label className=\"label\">Post Title:</label>\r\n            <div className=\"control\">\r\n              <input\r\n                name=\"title\"\r\n                className=\"input\"\r\n                type=\"text\"\r\n                placeholder=\"What's on your mind?\"\r\n                value={title}\r\n                onChange={onTitleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <label className=\"label\">Author:</label>\r\n            <div className=\"control\">\r\n              <div className=\"select\">\r\n                <select onChange={onUserChange} value={user}>\r\n                  <option></option>\r\n                  {renderedUsers}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <label className=\"label\">Description:</label>\r\n            <div className=\"control\">\r\n              <textarea\r\n                className=\"textarea\"\r\n                rows=\"2\"\r\n                value={content}\r\n                onChange={onContentChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <button\r\n                className={`button is-link ${\r\n                  addRequestStatus === \"pending\" && \"is-loading\"\r\n                }`}\r\n                title={`${!canSubmit ? \"Disabled button\" : \"\"}`}\r\n                disabled={!canSubmit}\r\n                type=\"submit\"\r\n              >\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default AddPostForm;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport PostAuthor from \"./PostAuthor\";\r\nimport TimeAgo from \"./TimeAgo\";\r\nimport ReactionButtons from \"./ReactionButtons\";\r\nimport { selectPostById } from \"./postsSlice\";\r\n\r\nfunction SinglePostPage({ match }) {\r\n  const { postId } = match.params;\r\n  const post = useSelector((state) => selectPostById(state, postId));\r\n\r\n  return (\r\n    <section className=\"hero is-light\">\r\n      <div className=\"hero-body\">\r\n        <div className=\"container\">\r\n          {post ? (\r\n            <>\r\n              <p className=\"title is-3\">{post.title}</p>\r\n              <p className=\"subtitle is-5\">\r\n                <PostAuthor userId={post.user} /> <TimeAgo date={post.date} />\r\n              </p>\r\n              <p className=\"subtitle is-5\">{post.content}</p>\r\n              <ReactionButtons\r\n                userReactions={post.reactions}\r\n                postId={post.id}\r\n              />\r\n            </>\r\n          ) : (\r\n            <h1 className=\"title\">Post Not Found</h1>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default SinglePostPage;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { postUpdated, selectPostById } from \"./postsSlice\";\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\n\r\nfunction EditPostForm({ match, history }) {\r\n  const { postId } = match.params;\r\n  const originalPost = useSelector((st) => selectPostById(st, postId));\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  const [title, setTitle] = useState(originalPost.title);\r\n  const [user, setUser] = useState(originalPost.user);\r\n  const [content, setContent] = useState(originalPost.content);\r\n  const dispatch = useDispatch();\r\n\r\n  const onTitleChange = (evt) => setTitle(evt.target.value);\r\n  const onUserChange = (evt) => setUser(evt.target.value);\r\n  const onContentChange = (evt) => setContent(evt.target.value);\r\n\r\n  const incompleteForm = !title || !user || !content;\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    if (incompleteForm) return;\r\n    dispatch(postUpdated({ title, user, content, id: postId }));\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const renderedUsers = users.map((user) => (\r\n    <option key={user.id} value={user.id}>\r\n      {user.name}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <section className=\"section\">\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Edit Post</h1>\r\n\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"field\">\r\n            <label className=\"label\">Post Title:</label>\r\n            <div className=\"control\">\r\n              <input\r\n                name=\"title\"\r\n                className=\"input\"\r\n                type=\"text\"\r\n                placeholder=\"What's on your mind?\"\r\n                value={title}\r\n                onChange={onTitleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <label className=\"label\">Author:</label>\r\n            <div className=\"control\">\r\n              <div className=\"select\">\r\n                <select onChange={onUserChange} value={user}>\r\n                  <option></option>\r\n                  {renderedUsers}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <label className=\"label\">Description:</label>\r\n            <div className=\"control\">\r\n              <textarea\r\n                className=\"textarea\"\r\n                rows=\"2\"\r\n                value={content}\r\n                onChange={onContentChange}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <div className=\"buttons\">\r\n                <button\r\n                  className=\"button is-link\"\r\n                  title={`${incompleteForm ? \"Disabled button\" : \"\"}`}\r\n                  disabled={incompleteForm}\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </button>\r\n                <button className=\"button is-link\" onClick={history.goBack}>\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default EditPostForm;\r\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Spinner from \"../../app/Spinner\";\nimport { Link } from \"react-router-dom\";\nimport { selectAllUsers } from \"./usersSlice\";\n\nfunction UsersList() {\n  const users = useSelector(selectAllUsers);\n  const renderedUsers = (\n    <ul>\n      {users.map(({ id, firstName, lastName, username }) => (\n        <li key={id} title={`${firstName} ${lastName}`}>\n          <Link to={`/users/${id}`}>{username}</Link>\n        </li>\n      ))}\n    </ul>\n  );\n\n  let content;\n  if (users.length > 0) {\n    content = (\n      <>\n        <h1 className=\"title\">Users</h1>\n        <h2 className=\"subtitle\">{renderedUsers}</h2>\n      </>\n    );\n  } else {\n    content = <Spinner />;\n  }\n\n  return (\n    <section className=\"hero\">\n      <div className=\"hero-body\">\n        <div className=\"container\">{content}</div>\n      </div>\n    </section>\n  );\n}\n\nexport default UsersList;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { selectUserById } from \"./usersSlice\";\nimport {\n  selectPostsByUser,\n  getPostsStatus,\n  fetchPosts,\n} from \"../posts/postsSlice\";\nimport Spinner from \"../../app/Spinner\";\n\nfunction UserPage({ match }) {\n  const { userId } = match.params;\n  const dispatch = useDispatch();\n  const user = useSelector((st) => selectUserById(st, userId));\n  const userPosts = useSelector((st) => selectPostsByUser(st, userId));\n  const postsStatus = useSelector(getPostsStatus);\n\n  const renderedPosts = userPosts.map(({ id, title }) => (\n    <li key={id}>\n      <Link to={`/post/${id}`}>{title}</Link>\n    </li>\n  ));\n\n  let content;\n  if (userPosts.length > 0) {\n    content = (\n      <>\n        <h1 className=\"title\">{user.username}</h1>\n        <ul>{renderedPosts}</ul>\n      </>\n    );\n  } else if (!user) {\n    content = <h1 className=\"title\">User Not Found</h1>;\n  } else {\n    content = <Spinner />;\n  }\n\n  useEffect(() => {\n    if (postsStatus === \"idle\") dispatch(fetchPosts());\n  }, [postsStatus, dispatch]);\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">{content}</div>\n    </section>\n  );\n}\n\nexport default UserPage;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectAllNotifications,\n  allNotificationsRead,\n} from \"./notificationsSlice\";\nimport { selectAllUsers } from \"../users/usersSlice\";\nimport { parseISO, formatDistanceToNow } from \"date-fns\";\n\nfunction NotificationList() {\n  const dispatch = useDispatch();\n  const notifications = useSelector(selectAllNotifications);\n  const users = useSelector(selectAllUsers);\n  const renderedNotifications = notifications.map(\n    ({ id, date, message, user: userId, isNew }) => {\n      const parsedDate = parseISO(date);\n      const timeAgo = formatDistanceToNow(parsedDate);\n      const { username } =\n        users.find(({ id }) => id === userId) || \"Unknown User\";\n\n      return (\n        <article key={id} className={`notification ${isNew && \"is-warning\"}`}>\n          <strong>{username}</strong> {message}\n          <div>\n            <em title={parsedDate}>{timeAgo} ago</em>\n          </div>\n        </article>\n      );\n    }\n  );\n\n  let content;\n  if (notifications.length > 0) {\n    content = renderedNotifications;\n  } else {\n    content = <h2 className=\"subtitle\">You're up to date</h2>;\n  }\n\n  useEffect(() => {\n    dispatch(allNotificationsRead());\n  });\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title\">Notifications</h1>\n        <div className=\"container\">{content}</div>\n      </div>\n    </section>\n  );\n}\n\nexport default NotificationList;\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Navbar from \"./app/Navbar\";\r\nimport PostsList from \"./features/posts/PostsList\";\r\nimport AddPostForm from \"./features/posts/AddPostForm\";\r\nimport SinglePostPage from \"./features/posts/SinglePostPage\";\r\nimport EditPostForm from \"./features/posts/EditPostForm\";\r\nimport UsersList from \"./features/users/UsersList\";\r\nimport UserPage from \"./features/users/UserPage\";\r\nimport NotificationList from \"./features/notifications/NotificationList\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <>\r\n              <AddPostForm />\r\n              <PostsList />\r\n            </>\r\n          )}\r\n        />\r\n        <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\r\n        <Route exact path=\"/post/:postId\" component={SinglePostPage} />\r\n        <Route exact path=\"/users\" component={UsersList} />\r\n        <Route exact path=\"/users/:userId\" component={UserPage} />\r\n        <Route exact path=\"/notifications\" component={NotificationList} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from \"miragejs\";\n\nimport { nanoid } from \"@reduxjs/toolkit\";\n\nimport faker from \"faker\";\nimport { sentence, paragraph, article, setRandom } from \"txtgen\";\nimport { parseISO } from \"date-fns\";\nimport seedrandom from \"seedrandom\";\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: \"always\",\n});\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true;\n\nlet rng = seedrandom();\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem(\"randomTimestampSeed\");\n  let seedDate;\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem(\"randomTimestampSeed\", randomSeedString);\n  }\n\n  rng = seedrandom(randomSeedString);\n  setRandom(rng);\n  faker.seed(seedDate.getTime());\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n\nconst notificationTemplates = [\n  \"poked you\",\n  \"says hi!\",\n  `is glad we're friends`,\n  \"sent you a gift\",\n];\n\nnew Server({\n  routes() {\n    this.namespace = \"fakeApi\";\n    this.timing = 2000;\n\n    this.resource(\"users\");\n    this.resource(\"posts\");\n    this.resource(\"comments\");\n\n    const server = this;\n\n    this.post(\"/posts\", function (schema, req) {\n      const data = this.normalizedRequestAttrs();\n      data.date = new Date().toISOString();\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId);\n      data.user = user;\n\n      if (data.content === \"error\") {\n        throw new Error(\"Could not save the post!\");\n      }\n\n      const result = server.create(\"post\", data);\n      return result;\n    });\n\n    this.get(\"/posts/:postId/comments\", (schema, req) => {\n      const post = schema.posts.find(req.params.postId);\n      return post.comments;\n    });\n\n    this.get(\"/notifications\", (schema, req) => {\n      const numNotifications = getRandomInt(1, 5);\n\n      let pastDate;\n\n      const now = new Date();\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since);\n      } else {\n        pastDate = new Date(now.valueOf());\n        pastDate.setMinutes(pastDate.getMinutes() - 15);\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users);\n        const template = randomFromArray(notificationTemplates);\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        };\n      });\n\n      return { notifications };\n    });\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid();\n      },\n      firstName() {\n        return faker.name.firstName();\n      },\n      lastName() {\n        return faker.name.lastName();\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName);\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName);\n      },\n\n      afterCreate(user, server) {\n        server.createList(\"post\", 3, { user });\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid();\n      },\n      title() {\n        return sentence();\n      },\n      date() {\n        return faker.date.recent(7);\n      },\n      content() {\n        return article(1);\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        };\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid();\n      },\n      date() {\n        return faker.date.past(2);\n      },\n      text() {\n        return paragraph();\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList(\"user\", 3);\n  },\n});\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport store from \"./app/store\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./api/server\";\r\nimport { fetchUsers } from \"./features/users/usersSlice\";\r\n\r\nstore.dispatch(fetchUsers());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}